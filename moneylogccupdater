#! /bin/bash
# I'm not proud of this shit, but it works

# Variables
EXTRACTFILE="/tmp/creditcard.txt"
TEMPFILE="/tmp/extratotemp"
MONEYLOGFILE_OFF="$HOME/Dropbox/Docs/moneylogcc.html"
MONEYLOGFILE_CLOUD="$HOME/Dropbox/Apps/MoneyLog Cloud/txt/moneylogcc.txt"
CONTROLFILE="$HOME/Dropbox/Docs/moneylogcccontrol"

# Control file lists every know/well used description and its usual tag
# Should have this format:
# DESCRIPTION;tag

# Check if the extrato file exists
if [ ! -e "$EXTRACTFILE" ]; then
	echo "$EXTRACTFILE does not exist. Go get it!"
	open "http://itau.com.br"
	exit 1
fi

# Convert extrato a format similar to the one used in moneylog
#dos2unix $EXTRACTFILE
sed -ri "/^([^0-9].*| *)$/d;/-[0-9]+,/d;s/ {2,}/;/g;s/ ([0-9]+,)/;\1/;s-^[0-9/]+;-01/$(date +%m/%Y);-;s/;([0-9])/;\1/;s/\*/ /g" $EXTRACTFILE
sed -r "s/^([0-9]{2})\/([0-9]{2})\/([0-9]{4});(.*);(.*)$/\3-\2-\1;\5;TAGS|\4/" $EXTRACTFILE | tr "/" "_" | sed "s/[[:blank:]]\{2,\}/ /g"> $TEMPFILE

# Check if there are duplicates and delete the from the $TEMPFILE
function cleardups(){
    TEMPDUPE="/tmp/tempdupe"
    cat "$MONEYLOGFILE_CLOUD" | tr "\t" ";" | tr "/" "_" > $TEMPDUPE

    while read line; do
        BEGIN="$(echo $line | cut -d";" -f-2)"
        END="$(echo $line | cut -d"|" -f2)"

        if grep -q "$BEGIN.*$END" $TEMPDUPE; then
            sed -i "/$BEGIN.*$END/d" $TEMPFILE
        fi
    done < $TEMPFILE

    rm -f $TEMPDUPE
}

# receives line tag tempfile
# Gets the line that will be tagged, and sed substitute it on the tempfile
function makesub(){
	BEGIN="$(echo $1 | cut -d";" -f-2)"
	END="$(echo $1 | cut -d"|" -f2)"
	sed -i "s@${1}@$BEGIN;$2 | ${END# }@" $3
}

# Receives line
# Used for files without descriptions in the control file and for changes
# Gets the line that will be changed and divide it to easier understanding
# Asks for a tag(s) and stores it on the TAG var
function asktag(){
	clear
	echo DATE: $(echo $1 | cut -d";" -f1)
	echo VALUE: $(echo $1 | cut -d";" -f2)
	echo DESC: $(echo $1 | cut -d"|" -f2)
	read -p "Tag? > " TAG < /dev/tty 2> /dev/tty
}

# Only to show the file that will be written on the moneylog
# Yeah crappy name
function resume(){
	clear
	echo -e "Here's your formatted moneylog entries\n"
	cat $TEMPFILE | tr ";" "\t"
}

# Same function as the above, but with line numbers to help the change function
# Yeah it could be only a function with an extra parameter, let's say TODO
function resumechange(){
	clear
	echo -e "Here's your formatted moneylog entries\n"
	cat -b $TEMPFILE | tr ";" "\t"
}

# Prompts which line you wish to chang
# If a valid line is given calls the appropriate functions
function change(){
    NUMLINE=$(wc -l $TEMPFILE | cut -d" " -f7)

    echo -n -e "\nChoose which line (empty or char to exit) [0-$NUMLINE] > "
    read LINEINDEX

    LINEINDEX=$(echo $LINEINDEX | tr -d "[[:alpha:]]")

    if [ -z "$LINEINDEX" ]; then
        return 1
    elif [ "$LINEINDEX" -lt 0 -o "$LINEINDEX" -gt "$NUMLINE" ]; then
        echo -e "\nInvalid Line Number"
        read
        return 0
    else
        SEDLINE=$(sed $LINEINDEX\!d $TEMPFILE)	
        asktag "$SEDLINE"
        makesub "$SEDLINE" "$TAG" $TEMPFILE
        return 0
    fi
}

# Writes the entries to the moneylog file
function commit(){

    # Lazy fix for less of pt-br chars in the terminal
    sed -i "s/almoco/almoÃ§o/g" $TEMPFILE

	echo -e "\nCommiting entries"

	cat $TEMPFILE | tr ";" "\t" | tr "_" "/" >> $MONEYLOGFILE_OFF
	echo >> $MONEYLOGFILE_OFF

	cat $TEMPFILE | tr ";" "\t" | tr "_" "/" >> "$MONEYLOGFILE_CLOUD"
	echo >> "$MONEYLOGFILE_CLOUD"

	echo -e "DONE\n"
	rm -f $EXTRACTFILE
	rm -f $TEMPFILE
	rm -f $MONEYLOGFILE_OFF.bkp
	rm -f "$MONEYLOGFILE_CLOUD.bkp"
	rm -f $TEMPFILE.bkp
}

# Check for duplicates
cleardups

# Iterates over every line in the control file
while read line; do
	# If comment skip
    echo $line | egrep -q "^(#.*)?$" && continue

	# Separates Description from Tag
	DESC=$(echo $line | cut -d";" -f1)
	TAG=$(echo $line | cut -d";" -f2)

	# Iterates over every line that has the description
    while read subline; do
        makesub "$subline" "$TAG" $TEMPFILE
    done < <(grep "$DESC" $TEMPFILE)
done < $CONTROLFILE

# After the matching with the control file is done, identify every untagged line and iterate over it
while read line; do
    # For each line, ask for a tag
    while true; do
        asktag "$line"

        # if not TAG is supplied, repeat
        if [ -z "$TAG" ]; then
            continue
        else
            makesub "$line" "$TAG" $TEMPFILE
            break
        fi
    done
done < <(grep "TAGS" $TEMPFILE)

# Stay on loop until you decide to not modify anything
while true; do 
    resume

    echo -e -n "\nChange [y/N] "
    read CHANGE
    CHANGE=$(echo $CHANGE | tr "[A-Z]" "[a-z]")

    if [ "$CHANGE" == "yes" -o "$CHANGE" == "y" ]; then
        while true; do
            resumechange
            change || break
        done
    else
        break
    fi
done

# Asks if you want to write to the moneylog file
echo -e -n "\nCommit [y/N] "
read COMMIT
COMMIT=$(echo $COMMIT | tr "[A-Z]" "[a-z]")

# Then writes it (or exit)
if [ "$COMMIT" == "yes" -o "$COMMIT" == "y" ]; then
	commit
else
	echo -e "\nExiting"
	exit 1
fi
